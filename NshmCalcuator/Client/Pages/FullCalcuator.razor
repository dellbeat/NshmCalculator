@page "/full"
@using NshmCalculator.Shared
@using System.Globalization
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<PageTitle>逆水寒手游属性收益计算器</PageTitle>
<ValidateForm @ref="ValidateForm" Model="@_baseInfo" OnValidSubmit="@OnCalculateBase">
    <Divider Text="玩家数值" Alignment="Alignment.Center" />
    <div class="row g-3">
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="攻击" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseAttack" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="破防" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseBreakDefense" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="元素攻击" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseElementAttack" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="克制数值" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseRestraint" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="命中" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseHit" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="会心" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseCriticalHits" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="会伤(%)" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseCriticalRate" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="周天会心率(%)" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseZtCriticalHitsRate" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-4">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="克制百分比(%)" />
                <BootstrapInput @bind-Value="@_baseInfo.PlayerBaseRestrainedRate" />
            </BootstrapInputGroup>
        </div>
    </div>
    <Divider Text="敌方数值" Alignment="Alignment.Center" />
    <div class="row g-3">
        <div class="col-6 col-lg-6 col-sm-6">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="敌方防御" />
                <BootstrapInput @bind-Value="@_baseInfo.EnemyDefense" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-lg-6 col-sm-6">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="敌方格挡" />
                <BootstrapInput @bind-Value="@_baseInfo.EnemyBlock" />
            </BootstrapInputGroup>
        </div>
        <div class="col-12" style="text-align: center">
            <BootstrapLabel Value="满命中：" />
            <BootstrapLabel Value="@_baseInfo.FullHit.ToString()" />
        </div>
    </div>
    <Divider Text="玩家新增数值" Alignment="Alignment.Center" />
    <div class="row g-3">
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增攻击" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseAttack" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增克制" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseRestraint" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增属性攻击" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseElementAttack" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增破防" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseBreakDefense" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增命中" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseHit" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增会心" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseCriticalHits" />
            </BootstrapInputGroup>
        </div>
        <div class="col-6 col-md-3">
            <BootstrapInputGroup>
                <BootstrapInputGroupLabel DisplayText="新增会伤率(%)" />
                <BootstrapInput @bind-Value="@_baseInfo.IncreaseCriticalRate" />
            </BootstrapInputGroup>
        </div>
        <div class="col-12" style="text-align:center">
            <Button ButtonType="@ButtonType.Submit" Text="计算"></Button>
        </div>
        <div class="col-6 col-md-4" style="text-align: center">
            <BootstrapLabel Value="未会心伤害：" />
            <BootstrapLabel Value="@_baseInfo.NonCriticalDamageFunValue.ToString("0.00")" />
        </div>
        <div class="col-6 col-md-4" style="text-align: center">
            <BootstrapLabel Value="含命中会心伤害期望：" />
            <BootstrapLabel Value="@_baseInfo.NonCriticalDamageFunValue.ToString("0.00")" />
        </div>
        <div class="col-6 col-md-4" style="text-align: center">
            <BootstrapLabel Value="实际命中率：" />
            <BootstrapLabel Value="@_baseInfo.HitRate.ToString("P2")" />
        </div>
        <div class="col-12" style="text-align: center">
            <BootstrapLabel Value="@LastTimeStr" />
        </div>
    </div>
</ValidateForm>

@code {

    private FullPlayerInfo _baseInfo = new();
    private ValidateForm? ValidateForm { get; set; }

    private string? LastTimeStr
    {
        get => _baseInfo.LastCalTime == null ? null : $"上次计算时间:{(((DateTime)_baseInfo.LastCalTime).ToString("yyyy-MM-dd HH:mm:ss"))}";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetInfo();
    }

    private void SaveInfo()
    {
        localStorage.SetItem("fullBaseInfo", _baseInfo);
    }

    private void GetInfo()
    {
        _baseInfo = localStorage.GetItem<FullPlayerInfo>("fullBaseInfo") ?? new();
    }

    /// <summary>
    /// 获取无首领加成的伤害
    /// </summary>
    /// <param name="attackOfPlayer">玩家攻击</param>
    /// <param name="restraintNum">玩家克制数值</param>
    /// <param name="elementAttackOfPlayer">玩家元素攻击</param>
    /// <param name="breakDefenseOfPlayer">玩家破防值</param>
    /// <param name="defenseOfMonster">敌方防御</param>
    /// <param name="resistOfMonster">敌方抵御</param>
    /// <param name="rate1">系数1</param>
    /// <param name="rate2">系数2</param>
    /// <param name="remainAirShield">剩余气盾，由于PVE目前暂不考虑该参数，故默认为0</param>
    private double CalculateBaseDamage(int attackOfPlayer, int restraintNum, int elementAttackOfPlayer, int breakDefenseOfPlayer, int defenseOfMonster, int resistOfMonster, double rate1, double rate2, int remainAirShield = 0)
    {
        double resistanceRemission = resistOfMonster * 1.0 / (resistOfMonster + 530);//敌方（怪物）抗性减免
        int remainDefense = defenseOfMonster - breakDefenseOfPlayer;//敌方剩余防御，理论不会小于0，不做特别判断
        double defenseRemission = remainDefense * 1.0 / (remainDefense + 2860);//防御减免

        double baseDamage = ((rate1 + rate2 * (attackOfPlayer - remainAirShield + restraintNum - resistOfMonster)) * (1 - defenseRemission) + rate2 * elementAttackOfPlayer * (1 - resistanceRemission));//无首领克制加成的伤害

        return baseDamage;
    }

    /// <summary>获取未会心伤害</summary>
    /// <param name="baseDamage">无首领克制的伤害</param>
    /// <param name="restrainedRate">首领克制百分比</param>
    private double CalculateNonCriticalDamage(double baseDamage, double restrainedRate)
    {
        return baseDamage * (1 + restrainedRate);
    }


    /// <summary>
    /// 获取会心伤害
    /// </summary>
    /// <param name="nonCriticalDamage">未会心伤害</param>
    /// <param name="hitNum">命中</param>
    /// <param name="blockOfMonster">敌方格挡</param>
    /// <param name="criticalSubRate">会心伤害百分比-100%</param>
    /// <param name="criticalHit">会心</param>
    /// <param name="criticalDefenseOfMonster">敌方会心抵抗</param>
    /// <param name="extraCriticalRate">内功提供的额外会心率</param>
    private double CalculateCriticalDamage(double nonCriticalDamage, int hitNum, int blockOfMonster, double criticalSubRate, int criticalHit, int criticalDefenseOfMonster, double extraCriticalRate)
    {
        double panelHitRateOfPlayer = (143 * hitNum * 1.0 / (hitNum + 713) / 100 is double panelNum && panelNum > 1 ? 1 : panelNum);//玩家[攻击方]面板命中率
        double panelDefenseRateOfMonster = 143 * 1.0 * blockOfMonster / (blockOfMonster + 713) / 100;//敌方[受击方]面板格挡率Da
        double hitRateOfPlayer = 0.95 + panelHitRateOfPlayer - panelDefenseRateOfMonster;//玩家对敌方命中率
        int remainCritical = (criticalHit - criticalDefenseOfMonster);//剩余会心
        double criticalRate = (115 * remainCritical + 90) * 1.0 / (remainCritical + 940) / 100 + extraCriticalRate;//会心率
        double criticalDamage = nonCriticalDamage * hitRateOfPlayer * (1 + criticalSubRate * criticalRate) + 0.5 * nonCriticalDamage * (1 - hitRateOfPlayer);//会心伤害【未计算技能倍数】

        return criticalDamage;
    }

    /// <summary>
    /// 普通计算攻击力
    /// </summary>
    private Task OnCalculateBase(EditContext context)
    {
        double skillRate = 1;//技能倍率
        double rate2 = 0.324;//系数2，暂定为固定值
        double rate1 = rate2 * 923;//系数1

        _baseInfo.BaseDamageFunValue = CalculateBaseDamage(_baseInfo.PlayerBaseAttack, _baseInfo.PlayerBaseRestraint, _baseInfo.PlayerBaseElementAttack, _baseInfo.PlayerBaseBreakDefense, _baseInfo.EnemyDefense, _baseInfo.EnemyCriticalDefense, rate1, rate2);
        _baseInfo.NonCriticalDamageFunValue = CalculateNonCriticalDamage(_baseInfo.BaseDamageFunValue, _baseInfo.PlayerBaseRestrainedRate / 100.0);
        _baseInfo.CriticalDamageFunValue = CalculateCriticalDamage(_baseInfo.NonCriticalDamageFunValue, _baseInfo.PlayerBaseHit, _baseInfo.EnemyBlock, (_baseInfo.PlayerBaseCriticalRate - 1) / 100.0, _baseInfo.PlayerBaseCriticalHits, _baseInfo.EnemyCriticalDefense, _baseInfo.PlayerBaseZtCriticalHitsRate / 100.0);
        _baseInfo.HitRate = (95 + 143 * (_baseInfo.PlayerBaseHit + _baseInfo.IncreaseHit) * 1.0 / (_baseInfo.PlayerBaseHit + _baseInfo.IncreaseHit + 713) - 143 * _baseInfo.EnemyBlock * 1.0 / (_baseInfo.EnemyBlock + 713)) / 100;

        if (_baseInfo.HitRate > 1)
        {
            _baseInfo.HitRate = 1;
        }

        SaveInfo();

        return Task.CompletedTask;
    }
}
